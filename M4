// module 4

vec3 makeRectBlur(vec2 uv, vec2 pos, vec2 size, float blur, vec3 color)
{
    float temp;
    
    temp = smoothstep(pos.x - blur, 
                        pos.x + blur, 
                        uv.x);
    temp -= smoothstep(pos.y + size.x - blur, 
                        pos.y + size.x + blur, 
                        uv.x);
    //removes bottom
    temp *= smoothstep(pos.x - blur, 
                        pos.x + blur, 
                        uv.y)
                        
                        -
                        
                        smoothstep(pos.y + size.y - blur, 
                        pos.y + size.y + blur, 
                        uv.y);
    //removes top
    /*
    temp -= smoothstep(pos.y + size.y - blur, 
                        pos.y + size.y + blur, 
                        uv.y);*/

    return vec3(temp) * color;
}
vec3 makeRect(vec2 uv, vec2 pos, vec2 posOffset, vec2 size, vec3 fill, vec3 border, bool displayOnlyBorders, float borderThickness)
{
    float tempBase;
    float tempFill;
    
    tempBase = smoothstep(pos.x + posOffset.x, 
                        pos.x + posOffset.x, 
                        uv.x);
    tempBase -= smoothstep(pos.y + size.x, 
                        pos.y + size.x, 
                        uv.x);
    tempBase *= smoothstep(pos.x + posOffset.y, 
                        pos.x + posOffset.y, 
                        uv.y)
                        
                -
                        
                smoothstep(pos.y + size.y, 
                        pos.y + size.y, 
                        uv.y);
                        
    vec3 rect1 = vec3(tempBase);
    
    pos.x += borderThickness;
    pos.y -= borderThickness;
                        
    tempFill = smoothstep(pos.x + posOffset.x, 
                        pos.x + posOffset.x, 
                        uv.x);
    tempFill -= smoothstep(pos.y + size.x, 
                        pos.y + size.x, 
                        uv.x);
    tempFill *= smoothstep(pos.x + posOffset.y, 
                        pos.x + posOffset.y, 
                        uv.y)
                        
                -
                        
                smoothstep(pos.y + size.y, 
                        pos.y + size.y, 
                        uv.y);
                        
    vec3 rect2 = vec3(tempFill);
        
        rect1 *= border;
    
    if(displayOnlyBorders)
    {
        return vec3(max(rect1.x - rect2.x, 0.0), max(rect1.y - rect2.y, 0.0), max(rect1.z - rect2.z, 0.0)) * vec3(1.0); //returns borders
    }
    else
    {
        //deletes original square
        vec3 temp = vec3(max(rect1.x - rect2.x, 0.0), max(rect1.y - rect2.y, 0.0), max(rect1.z - rect2.z, 0.0)) * vec3(1.0);
        
        rect2 *= fill;
    
        return temp + rect2; //returns filled with borders
    }
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    vec2 uv = fragCoord/iResolution.xy;
    //do not delete pls ^^

    //ps07
    
    //a
    /*
    float limit = 0.1;
    float center = 0.5;
    if(uv.x > center - limit && uv.x < center + limit && uv.y > center - limit && uv.y < center + limit) //center
    {
        fragColor = vec4(0.0, 1.0, 1.0, 1.0);
    }
    */
    
    //b
    /*
    float limit = 0.1;
    float center = 0.5;
    
    //normal square with step
    
    float color = step(uv.x, center + limit);
    color -= step(uv.x, center - limit);
    color -= step(uv.y, center - limit);
    color *= step(uv.y, center + limit);
    
    fragColor = vec4(0.0, color, color, 1.0);
    */
    
    //blurred square with smoothstep
    /*
    vec2 pos = vec2(0.3, 0.5);
    vec2 size = vec2(0.2, 0.2);
    float blur = 0.05;
    vec3 color;
    float tColor;
    
    tColor = smoothstep(pos.x - blur, 
                        pos.x + blur, 
                        uv.x);
    tColor -= smoothstep(pos.y + size.x - blur, 
                        pos.y + size.x + blur, 
                        uv.x);
    //removes bottom
    tColor *= smoothstep(pos.x - blur, 
                        pos.x + blur, 
                        uv.y);
    //removes top
    tColor -= smoothstep(pos.y + size.y - blur, 
                        pos.y + size.y + blur, 
                        uv.y);
    
    color = vec3(0.0, tColor, tColor);
    
    fragColor = vec4(color, 1.0);
    */
    
    //c
    /*
    vec3 cyanRect = makeRectBlur(uv, vec2(0.3, 0.5), vec2(0.2, 0.2), 0.0, vec3(0.0, 1.0, 1.0));
    
    vec3 whiteRect = makeRectBlur(uv, vec2(0.31, 0.49), vec2(0.2, 0.2), 0.0, vec3(1.0, 1.0, 1.0));
    
    fragColor = vec4(-whiteRect + cyanRect, 1.0);
    */
    
    //d
    /*
    vec3 cyanRect = makeRect(
                            uv, 
                            vec2(0.2, 0.5), //pos
                            vec2(0.1, 0.1), //pos offset
                            vec2(0.2, 0.2), //size
                            vec3(1.0, 0.0, 0.0), //fill
                            vec3(0.0, 1.0, 1.0), //border
                            true, //display only borders
                            0.01); //border thickness
    
    fragColor = vec4(cyanRect, 1.0);
    */
    
    //ps08
    /*
    vec3 rect1 = makeRect(
                            uv, 
                            vec2(0.0, 0.1), //pos
                            vec2(0.0, 0.0), //pos offset
                            vec2(0.01, 0.02), //size
                            vec3(1.0, 1.0, 1.0), //fill
                            vec3(0.0, 0.0, 0.0), //border
                            false, //display only borders
                            0.01); //border thickness
    
    vec3 rect2 = makeRect(
                            uv, 
                            vec2(0.0, 0.2), //pos
                            vec2(0.1, 0.0), //pos offset
                            vec2(0.1, 0.1), //size
                            vec3(0.0, 0.0, 1.0), //fill
                            vec3(0.0, 0.0, 0.0), //border
                            false, //display only borders
                            0.01); //border thickness
                            
    vec3 rect3 = makeRect(
                            uv, 
                            vec2(0.0, 0.3), //pos
                            vec2(0.0, 0.11), //pos offset
                            vec2(-0.24, 0.1), //size
                            vec3(1.0, 1.0, 0.0), //fill
                            vec3(0.0, 0.0, 0.0), //border
                            false, //display only borders
                            0.01); //border thickness
                            
    vec3 rect4 = makeRect(
                            uv, 
                            vec2(0.0, 0.3), //pos
                            vec2(0.05, 0.11), //pos offset
                            vec2(-0.19, 0.1), //size
                            vec3(1.0, 1.0, 1.0), //fill
                            vec3(0.0, 0.0, 0.0), //border
                            false, //display only borders
                            0.01); //border thickness
                            
    vec3 rect5 = makeRect(
                            uv, 
                            vec2(0.0, 0.7), //pos
                            vec2(0.0, 0.4), //pos offset
                            vec2(-0.59, 0.0), //size
                            vec3(1.0, 1.0, 1.0), //fill
                            vec3(0.0, 0.0, 0.0), //border
                            false, //display only borders
                            0.01); //border thickness
                            
    vec3 rect6 = makeRect(
                            uv, 
                            vec2(0.0, 0.8), //pos
                            vec2(0.1, 0.4), //pos offset
                            vec2(-0.4, 0.0), //size
                            vec3(1.0, 0.0, 0.0), //fill
                            vec3(0.0, 0.0, 0.0), //border
                            false, //display only borders
                            0.01); //border thickness
                            
    vec3 rect7 = makeRect(
                            uv, 
                            vec2(0.0, 0.6), //pos
                            vec2(0.1, 0.3), //pos offset
                            vec2(-0.2, -0.2), //size
                            vec3(0.0, 0.0, 0.0), //fill
                            vec3(0.0, 0.0, 0.0), //border
                            false, //display only borders
                            0.01); //border thickness
                            
    vec3 rect8 = makeRect(
                            uv, 
                            vec2(0.0, 0.9), //pos
                            vec2(0.0, 0.7), //pos offset
                            vec2(-0.79, 0.0), //size
                            vec3(1.0, 1.0, 0.0), //fill
                            vec3(0.0, 0.0, 0.0), //border
                            false, //display only borders
                            0.01); //border thickness
                            
    vec3 rect9 = makeRect(
                            uv, 
                            vec2(0.0, 0.9), //pos
                            vec2(0.1, 0.8), //pos offset
                            vec2(-0.4, 0.0), //size
                            vec3(0.0, 0.0, 0.0), //fill
                            vec3(0.0, 0.0, 0.0), //border
                            false, //display only borders
                            0.01); //border thickness
                            
    vec3 rect10 = makeRect(
                            uv, 
                            vec2(0.0, 1.0), //pos
                            vec2(0.0, 0.9), //pos offset
                            vec2(0.0, 0.0), //size
                            vec3(1.0, 1.0, 1.0), //fill
                            vec3(0.0, 0.0, 0.0), //border
                            false, //display only borders
                            0.01); //border thickness
                            
    vec3 rect11 = makeRect(
                            uv, 
                            vec2(0.0, 0.3), //pos
                            vec2(0.29, 0.0), //pos offset
                            vec2(0.4, 0.0), //size
                            vec3(1.0, 0.0, 0.0), //fill
                            vec3(0.0, 0.0, 0.0), //border
                            false, //display only borders
                            0.01); //border thickness
                            
    vec3 rect12 = makeRect(
                            uv, 
                            vec2(0.0, 0.8), //pos
                            vec2(0.39, 0.3), //pos offset
                            vec2(-0.3, 0.0), //size
                            vec3(1.0, 1.0, 1.0), //fill
                            vec3(0.0, 0.0, 0.0), //border
                            false, //display only borders
                            0.01); //border thickness
                            
    vec3 rect13 = makeRect(
                            uv, 
                            vec2(0.0, 0.1), //pos
                            vec2(0.69, 0.0), //pos offset
                            vec2(0.9, 0.0), //size
                            vec3(1.0, 1.0, 1.0), //fill
                            vec3(0.0, 0.0, 0.0), //border
                            false, //display only borders
                            0.01); //border thickness
                            
    vec3 rect14 = makeRect(
                            uv, 
                            vec2(0.0, 0.2), //pos
                            vec2(0.69, 0.1), //pos offset
                            vec2(0.8, 0.0), //size
                            vec3(1.0, 1.0, 0.0), //fill
                            vec3(0.0, 0.0, 0.0), //border
                            false, //display only borders
                            0.01); //border thickness
                            
    vec3 rect15 = makeRect(
                            uv, 
                            vec2(0.0, 0.4), //pos
                            vec2(0.69, 0.2), //pos offset
                            vec2(0.6, 0.0), //size
                            vec3(1.0, 1.0, 1.0), //fill
                            vec3(0.0, 0.0, 0.0), //border
                            false, //display only borders
                            0.01); //border thickness
                            
    vec3 rect16 = makeRect(
                            uv, 
                            vec2(0.0, 0.9), //pos
                            vec2(0.9, 0.4), //pos offset
                            vec2(0.1, 0.0), //size
                            vec3(1.0, 1.0, 1.0), //fill
                            vec3(0.0, 0.0, 0.0), //border
                            false, //display only borders
                            0.01); //border thickness
                            
    vec3 rect17 = makeRect(
                            uv, 
                            vec2(0.4, 0.9), //pos
                            vec2(0.29, 0.0), //pos offset
                            vec2(0.01, 0.0), //size
                            vec3(0.0, 0.0, 1.0), //fill
                            vec3(0.0, 0.0, 0.0), //border
                            false, //display only borders
                            0.01); //border thickness
                            
    vec3 rect18 = makeRect(
                            uv, 
                            vec2(0.2, 0.55), //pos
                            vec2(0.29, 0.1), //pos offset
                            vec2(0.01, 0.35), //size
                            vec3(1.0, 1.0, 0.0), //fill
                            vec3(0.0, 0.0, 0.0), //border
                            false, //display only borders
                            0.01); //border thickness
                            
    vec3 rect19 = makeRect(
                            uv, 
                            vec2(0.2, 0.69), //pos
                            vec2(0.35, 0.1), //pos offset
                            vec2(0.01, 0.2), //size
                            vec3(0.0, 0.0, 0.0), //fill
                            vec3(0.0, 0.0, 0.0), //border
                            false, //display only borders
                            0.01); //border thickness
    
    vec3 finalColor = rect1 + rect2 + rect3 + rect4 + rect5 + rect6 + rect7 + rect8 + rect9 + rect10
                    + rect11 + rect12 + rect13 + rect14 + rect15 + rect16 + rect17 + rect18 + rect19;
    
    fragColor = vec4(finalColor, 1.0);
    */
}
