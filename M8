// module 8

#define white vec3(1.0)
#define black vec3(0.0)
#define gray vec3(0.5)
#define red vec3(1.0, 0.0, 0.0)
#define green vec3(0.0, 1.0, 0.0)
#define blue vec3(0.0, 0.0, 1.0)
#define PI 3.14159265358979323846

vec3 makeRect(vec2 uv, vec2 posX, vec2 posY, float blur, vec3 fill, vec3 border, bool displayOnlyBorders, float borderThickness)
{
    float tempBase;
    float tempFill;
    
    tempBase = smoothstep(posX.x - blur, 
                        posX.x + blur, 
                        uv.x);
    tempBase -= smoothstep(posY.x - blur, 
                        posY.x + blur, 
                        uv.x);
    tempBase *= smoothstep(posX.y - blur, 
                        posX.y + blur, 
                        uv.y)
                -
                smoothstep(posY.y - blur, 
                        posY.y + blur, 
                        uv.y);
                        
    vec3 rect1 = vec3(tempBase);
    
    posX.x += borderThickness;
    posX.y += borderThickness;
    posY.x -= borderThickness;
    posY.y -= borderThickness;
                        
    tempFill = smoothstep(posX.x - blur, 
                        posX.x + blur, 
                        uv.x);
    tempFill -= smoothstep(posY.x - blur, 
                        posY.x + blur, 
                        uv.x);
    tempFill *= smoothstep(posX.y - blur, 
                        posX.y + blur, 
                        uv.y)
                -
                smoothstep(posY.y - blur, 
                        posY.y + blur, 
                        uv.y);
                        
    vec3 rect2 = vec3(tempFill);
        
    rect1 *= border;
    
    if(displayOnlyBorders)
    {
        return vec3(max(rect1.x - rect2.x, 0.0), max(rect1.y - rect2.y, 0.0), max(rect1.z - rect2.z, 0.0)) * vec3(1.0); //returns borders
    }
    else
    {
        //deletes original square
        vec3 temp = vec3(max(rect1.x - rect2.x, 0.0), max(rect1.y - rect2.y, 0.0), max(rect1.z - rect2.z, 0.0)) * vec3(1.0);
        
        rect2 *= fill;
    
        return temp + rect2; //returns filled with borders
    }
}

vec3 makeCircle(vec2 uv, vec2 pos, float radius, float blur, vec3 color, bool isPulsing)
{
    float circle = 0.0;
    
    if(isPulsing)
    {
        circle = smoothstep(
                            radius, 
                            (sin(iTime * 7.0) / 2.0 * radius) + 0.1 + radius + blur, 
                            distance(uv, pos)
                          );
    }
    else
    {
        circle = smoothstep(
                            radius,
                            radius + blur, 
                            distance(uv, pos)
                          );
    }
    
    return (1.0 - circle) * color;
}

vec3 makeLine(vec2 uv, vec2 posX, vec2 posY, float thickness, vec3 color)
{
    vec2 allPixels = uv - posX;
    vec2 direction = posY - posX;
	float line = clamp(dot(allPixels, direction) / dot(direction, direction), 0.0, 1.0);
    
    if(length(allPixels - direction * line) < thickness)
    {
        return color;
    }
    else
    {
        return black;
    }
}

mat2 rotate2d(float _angle){
    return mat2(cos(_angle),-sin(_angle),
                sin(_angle),cos(_angle));
}

mat2 scale(vec2 _scale){
    return mat2(_scale.x,0.0,
                0.0,_scale.y);
}

vec2 midpoint(vec2 pos1, vec2 pos2)
{
    return vec2((pos1.x + pos2.x) / 2.0, (pos1.y + pos2.y) / 2.0);
}

//==================================================================================================================================

vec3 ticTacTile(vec2 uv, float ratio, int type, vec2 pos)
{
    //vec2((0.565 / ratio), 1.0) / 2.0 is center
    
    if (type == 1) //o
    {
        float radius = 0.35;
        
        vec3 circle1 = makeCircle(
                            uv,  
                            pos, //pos
                            radius, //radius
                            0.0, //blur
                            red + green, //color
                            false); //is pulsing
        
        vec3 circle2 = makeCircle(
                            uv,  
                            pos, //pos
                            radius - 0.05, //radius
                            0.00, //blur
                            white, //color
                            false); //is pulsing
        
        return -circle1 + circle2;
    }
    else if (type == 2) //x
    {
        float extend = 0.3;
        vec3 ex1 = makeLine(uv, 
                            pos - extend, //posX
                            pos + extend, //posY
                            0.025, //thickness
                            white); //color
        
        vec3 ex2 = makeLine(uv, 
                            vec2(pos.x - extend, pos.y + extend), //posX
                            vec2(pos.x + extend, pos.y - extend), //posY
                            0.025, //thickness
                            white); //color
        
        return -clamp(ex1 + ex2, 0.0, 1.0) + ((ex1 + ex2) * red);
    }
    else
    {
        return vec3(0.0);
    }
}

//==================================================================================================================================

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    float ratio = iResolution.y / iResolution.x; // resolution
    vec2 uv = fragCoord/iResolution.xy;
    vec2 centerPos = vec2(0.5 / ratio, 0.5);
    
    //uv.x /= ratio;
    
    vec2 gridUV = uv;
    gridUV *= vec2(3.0, 3.0);
    vec2 index = floor(gridUV);
    gridUV = fract(gridUV);
    
    //ps13
    /*
    vec3 grid = makeRect(
                            gridUV, 
                            vec2(0.0 / ratio, 0.0), //posX
                            vec2(1.0 / ratio, 1.0), //posY
                            0.0, //blur
                            white, //fill
                            black, //border
                            false, //display only borders
                            0.01); //border thickness
    
    vec3 finalTiles = ticTacTile(gridUV, ratio, 1, vec2(0.5));
    
    if(index.x == 0.0 && index.y == 2.0) //tl
    {
        finalTiles = ticTacTile(gridUV, ratio, 2, vec2(0.5));
    }
    if(index.x == 0.0 && index.y == 1.0)//ml
    {
        finalTiles = ticTacTile(gridUV, ratio, 2, vec2(0.5));
    }
    if(index.x == 1.0 && index.y == 1.0)//mm
    {
        finalTiles = ticTacTile(gridUV, ratio, 2, vec2(0.5));
    }
    if(index.x == 2.0 && index.y == 1.0)//mr
    {
        finalTiles = ticTacTile(gridUV, ratio, 2, vec2(0.5));
    }
    if(index.x == 1.0 && index.y == 0.0)//bm
    {
        finalTiles = ticTacTile(gridUV, ratio, 2, vec2(0.5));
    }
    
    vec3 winnerBar = makeLine(uv, 
                            vec2(0.1, 0.5), //posX
                            vec2(0.9, 0.5), //posY
                            0.01, //thickness
                            green); //color
    
    vec3 finalGrid = clamp(grid - winnerBar, 0.0, 1.0);
    
    fragColor = vec4(finalGrid + finalTiles, 1.0);
    //fragColor = vec4(finalTiles, 1.0);
    */
    
    //ps14
    
    //a
    /*
    uv *= 3.0;
    uv.x += step(1.0, mod(uv.y, 2.0)) * 0.5 + iTime;
    uv = fract(uv);
    
    vec3 grid = makeRect(
                            uv, 
                            vec2(0.0 / ratio, 0.0), //posX
                            vec2(1.0 / ratio, 1.0), //posY
                            0.0, //blur
                            white, //fill
                            black, //border
                            false, //display only borders
                            0.025); //border thickness
    fragColor = vec4(grid, 1.0);
    */
    //b
    /*
    uv *= 3.0;
    
    if(fract(uv.y * 0.5) > 0.5)
    {
        uv.x += step(1.0, mod(uv.y, 2.0)) * 0.5 + iTime;
    }
    else
    {
        uv.x -= step(1.0, mod(uv.y, 2.0)) * 0.5 + iTime;
    }
    
    uv = fract(uv);
    
    vec3 grid = makeRect(
                            uv, 
                            vec2(0.0 / ratio, 0.0), //posX
                            vec2(1.0 / ratio, 1.0), //posY
                            0.0, //blur
                            white, //fill
                            black, //border
                            false, //display only borders
                            0.025); //border thickness
    fragColor = vec4(grid, 1.0);
    */
    
    //c
    /*
    uv *= 3.0;
    
    if(fract(uv.x * 0.5) > 0.5)
    {
        uv.y += step(1.0, mod(uv.x, 2.0)) * 0.5 + iTime;
    }
    else
    {
        uv.y -= step(1.0, mod(uv.x, 2.0)) * 0.5 + iTime;
    }
    
    uv = fract(uv);
    
    vec3 grid = makeRect(
                            uv, 
                            vec2(0.0 / ratio, 0.0), //posX
                            vec2(1.0 / ratio, 1.0), //posY
                            0.0, //blur
                            white, //fill
                            black, //border
                            false, //display only borders
                            0.025); //border thickness
    
    fragColor = vec4(grid, 1.0);
    */
}
